{"/home/travis/build/npmtest/node-npmtest-await/test.js":"/* istanbul instrument in package npmtest_await */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-await/lib.npmtest_await.js":"/* istanbul instrument in package npmtest_await */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_await = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_await = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-await/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-await && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_await */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_await\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_await.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_await.rollup.js'] =\n            local.assetsDict['/assets.npmtest_await.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_await.__dirname +\n                    '/lib.npmtest_await.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-await/node_modules/await/await.js":"// ########################################################################\n// PROLOGUE - LICENSE\n\n/*\nCopyright (c) 2013 by Greg Reimer\nhttps://github.com/greim\nhttp://obadger.com/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n(function(){\n\n  // ------------------------------------------------------------------------\n  // CLOSURE SCOPE VARS\n\n  var slice = Array.prototype.slice;\n\n  // ------------------------------------------------------------------------\n  // PROGRESS CLASS\n\n  function Progress(){}\n  Progress.prototype = {\n    getAverage: function(){\n      var names = Object.keys(this);\n      var total = 0;\n      for (var i=0; i<names.length; i++) {\n        total += this[names[i]];\n      }\n      var average = total / names.length;\n      return average;\n    }\n  };\n\n  // ------------------------------------------------------------------------\n  // GOTTEN CLASS\n\n  function Gotten(){}\n  Gotten.prototype = {\n    forEach: Array.prototype.forEach,\n    map: Array.prototype.map,\n    some: Array.prototype.some,\n    every: Array.prototype.every,\n    reduce: Array.prototype.reduce,\n    slice: Array.prototype.slice,\n    join: Array.prototype.join,\n    filter: Array.prototype.filter,\n    keys: function(){\n      return Object.keys(this);\n    },\n    values: function(){\n      return Object.keys(this).map(function(name){\n        return this[name];\n      }, this);\n    }\n  };\n\n  // ------------------------------------------------------------------------\n  // PROMISE CLASS\n\n  function Promise() {\n    this._progress = new Progress();\n    this._built = false;\n    this._slots = {};\n    this._got = new Gotten();\n    this._allbacks = [];\n    this._failure = false;\n    this._success = false;\n  }\n\n  Promise.prototype = {\n\n    // ------------------------------------------------------------------------\n\n    /**\n    Runs the given callback, passing it an instance of the promise,\n    and then returning that same instance. Fails on exception.\n    */\n    run: function(cb, ctx){\n      try {\n        cb.call(ctx, this);\n      } catch(ex) {\n        this.fail(ex);\n      }\n      return this;\n    },\n\n    // ------------------------------------------------------------------------\n\n    _on: function(event, cb, ctx){\n      if (typeof cb !== 'function') {\n        throw new Error('No callback provided.');\n      }\n\n      // NOTE: It's possible for both this._success and this._failure\n      // to be true at the same time. In such cases this._success\n      // pre-empts this._failure.\n\n      if (this._success || this._failure) {\n        // timeout guarantees cb gets\n        // executed after return\n        var thisProm = this;\n        setTimeout(function(){\n          if (event === 'resolve') {\n            cb.call(ctx);\n          }\n          if (thisProm._success) {\n            if (event === 'keep') {\n              cb.call(ctx, thisProm._got);\n            }\n          } else {\n            if (event === 'fail') {\n              cb.apply(ctx, thisProm._failure);\n            }\n          }\n        },0);\n      } else {\n        this._allbacks.push({\n          callback:cb,\n          context:ctx,\n          type:event\n        });\n      }\n\n      return this;\n    },\n\n    // ------------------------------------------------------------------------\n\n    onfail: function(cb, ctx){\n      return this._on('fail', cb, ctx);\n    },\n\n    // ------------------------------------------------------------------------\n\n    onkeep: function(cb, ctx){\n      return this._on('keep', cb, ctx);\n    },\n\n    // ------------------------------------------------------------------------\n\n    onresolve: function(cb, ctx){\n      return this._on('resolve', cb, ctx);\n    },\n\n    // ------------------------------------------------------------------------\n\n    onprogress: function(cb, ctx){\n      return this._on('progress', cb, ctx);\n    },\n\n    // ------------------------------------------------------------------------\n\n    failer: function(){\n      var thisProm = this;\n      return function(){\n        return Promise.prototype.fail.apply(thisProm, arguments);\n      };\n    },\n\n    // ------------------------------------------------------------------------\n\n    progress: function(){\n      if (!this._allbacks) {\n        return this;\n      }\n      var amounts = arguments[0];\n      if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number') {\n        amounts = {};\n        amounts[arguments[0]] = arguments[1];\n      }\n      Object.keys(amounts).forEach(function(name){\n        var amount = amounts[name];\n        if (this._slots[name] === undefined) {\n          return;\n        }\n        amount = parseFloat(amount) || 0;\n        amount = Math.max(Math.min(amount, 1), 0);\n        this._progress[name] = amount;\n      }, this);\n      this._allbacks.forEach(function(allback){\n        if (allback.type === 'progress') {\n          allback.callback.call(allback.context, this._progress);\n        }\n      }, this);\n      return this;\n    },\n\n    // ------------------------------------------------------------------------\n\n    /*\n    Keep part of the promise.\n    */\n    keep: function(name, data){\n      if (data === undefined) {\n        data = null;\n      }\n      if (this._got.hasOwnProperty(name)){\n        return this;\n      }\n      if (!this._slots.hasOwnProperty(name)) {\n        this._got[name] = data;\n        return this;\n      }\n      if (!this._failure && !this._success){\n        this._progress[name] = 1;\n        this._slots[name] = true;\n        this._got[name] = data;\n        var kept = Object.keys(this._slots).every(function(item){\n          return this._slots[item];\n        }, this);\n        if (kept) {\n          this._success = true;\n          this._allbacks.filter(function(obj){\n            return obj.type === 'keep' || obj.type === 'resolve';\n          }).forEach(function(obj){\n            if (obj.type === 'keep') {\n              obj.callback.call(obj.context, this._got);\n            } else { // it's resolve\n              obj.callback.call(obj.context);\n            }\n          }, this);\n          // these are no longer needed, allow GC\n          this._allbacks = undefined;\n        }\n      }\n      return this;\n    },\n\n    // ------------------------------------------------------------------------\n\n    /*\n    Fail the promise for some reason.\n    */\n    fail: function(){\n      if (!this._failure && !this._success){\n        this._failure = slice.call(arguments);\n        this._allbacks.filter(function(obj){\n          return obj.type === 'fail' || obj.type === 'resolve';\n        }).forEach(function(obj){\n          if (obj.type === 'fail') {\n            obj.callback.apply(obj.context, this._failure);\n          } else { // resolve\n            obj.callback.call(obj.context);\n          }\n        }, this);\n        // these are no longer needed, allow GC\n        this._allbacks = undefined;\n      }\n      return this;\n    },\n\n    // ------------------------------------------------------------------------\n\n    /**\n    Convenience function for error-first Node JS callback convention.\n    */\n    nodify: function(){\n      var items = slice.call(arguments);\n      var thisProm = this;\n      return function(err){\n        if (err) {\n          thisProm.fail(err);\n        } else {\n          var args = slice.call(arguments);\n          if (typeof items[0] === 'function') {\n            var cb = items[0];\n            var ctx = items[1];\n            cb.apply(ctx, args);\n          } else {\n            args.shift(); // lose the error\n            items.forEach(function(thing, idx){\n              if (thing !== null && thing !== undefined) {\n                thisProm.keep(thing, args[idx]);\n              }\n            });\n          }\n        }\n      };\n    },\n\n    // ------------------------------------------------------------------------\n\n    take: function(p2, map){\n      if (this._success || this._failure) {\n        // do nothing\n      } else if (p2 instanceof Promise) {\n        p2.onfail(this.failer());\n        p2.onkeep(function(got){\n          var taken = {}, gotItems = Object.keys(got);\n\n          // take any direct matches first\n          gotItems.forEach(function(item){\n            if (this._slots.hasOwnProperty(item)) {\n              taken[item] = got[item];\n            }\n          }, this);\n\n          // take matches via mapping, overwrites any direct matches\n          if (map) {\n            gotItems.forEach(function(item){\n              if (map.hasOwnProperty(item) && this._slots.hasOwnProperty(map[item])){\n                taken[map[item]] = got[item];\n              }\n            }, this);\n          }\n\n          Object.keys(taken).forEach(function(item){\n            this.keep(item, taken[item]);\n          }, this);\n        }, this);\n      } else if (p2 && typeof p2.then === 'function' && typeof map === 'string') {\n        var name = map;\n        var thisProm = this;\n        p2.then(function(val){\n          thisProm.keep(name, val);\n        },function(err){\n          thisProm.fail(err);\n        },function(amount){\n          thisProm.progress(name, amount);\n        });\n      }\n      return this;\n    },\n\n    // ------------------------------------------------------------------------\n\n    map: function(map){\n      map || (map = {}); // eslint-disable-line no-unused-expressions\n      var items = [];\n      Object.keys(this._slots).forEach(function(item){\n        if (map.hasOwnProperty(item)) {\n          items.push(map[item]);\n        } else {\n          items.push(item);\n        }\n      });\n      return _await.apply(this, items).take(this, map);\n    },\n\n    // ------------------------------------------------------------------------\n\n    then: (function(){\n      // private helper\n      function defaultFulfilled(){ return this; }\n      function defaultRejected(err){ throw err; }\n      function fulfillWithResult(thenProm, returned, got) {\n        if (returned instanceof _await) {\n          thenProm._buildState(returned);\n        } else {\n          var valueProm = _await('value').run(function(prom){\n            if (returned && typeof returned.then === 'function') {\n              returned.then(function(val) {\n                prom.keep('value', val);\n              },function(reason) {\n                prom.fail(reason);\n              });\n            } else {\n              // 'returned' is some value other than a promise\n              prom.keep('value', returned);\n            }\n          });\n          thenProm._buildState(valueProm);\n        }\n        // accumulate values, as long as the old\n        // values don't clobber the new ones\n        if (got) {\n          got.keys().forEach(function(name){\n            if (!thenProm._slots.hasOwnProperty(name)) {\n              thenProm.keep(name, got[name]);\n            }\n          });\n        }\n      }\n      return function(onFulfilled, onRejected, onProgress) {\n        if (typeof onFulfilled !== 'function') {\n          onFulfilled = defaultFulfilled;\n        }\n        if (typeof onRejected !== 'function') {\n          onRejected = defaultRejected;\n        }\n        var thisProm = this;\n        // empty promise so it can build state from a future promise\n        return _await().run(function(thenProm) {\n          thisProm\n          .onkeep(function(got) {\n            try {\n              var returnedValue = onFulfilled.call(thisProm, got);\n              fulfillWithResult(thenProm, returnedValue, got);\n            } catch(ex) {\n              thenProm.fail(ex);\n            }\n          })\n          .onfail(function(reason) {\n            try {\n              var returnedValue = onRejected.call(thisProm, reason);\n              fulfillWithResult(thenProm, returnedValue);\n            } catch(ex) {\n              thenProm.fail(ex);\n            }\n          });\n          if (typeof onProgress === 'function') {\n            thisProm.onprogress(function() {\n              try {\n                // make sure to call the prototype getAverage() in case there's a slot named \"getAverage\"\n                onProgress.call(thisProm, Progress.prototype.getAverage.call(thisProm._progress));\n              } catch(ex) {}\n            });\n          }\n        });\n      };\n    })(),\n\n    // ------------------------------------------------------------------------\n\n    \"catch\": function(onRejected){\n      return this.then(null, onRejected);\n    },\n\n    // ------------------------------------------------------------------------\n\n    _buildState: function() {\n      var items = slice.call(arguments);\n\n      // Check if already built.\n      if (this._built) {\n        throw new Error('cannot build state twice');\n      } else {\n        this._built = items.length > 0;\n      }\n\n      // Populate slots.\n      items.forEach(function(item) {\n        if (item instanceof Promise) {\n          Object.keys(item._slots).forEach(function(item) { // eslint-disable-line no-shadow\n            this._slots[item] = false;\n          }, this);\n        } else {\n          this._slots[item] = false;\n        }\n      }, this);\n\n      // Having populated slots, take promises.\n      items.forEach(function(item) {\n        if (item instanceof Promise) {\n          this.take(item);\n        }\n      }, this);\n\n      Object.keys(this._slots).forEach(function(slot){\n        this._progress[slot] = 0;\n      }, this);\n\n      return this;\n    }\n  };\n\n  // ------------------------------------------------------------------------\n  // FACTORY FUNCTION\n\n  // this is the function exported\n  var _await = function(){\n    var prom = new Promise();\n    prom._buildState.apply(prom, arguments);\n    return prom;\n  };\n\n  // ------------------------------------------------------------------------\n  // AWAITING LISTS\n\n  _await.all = function(list) {\n    if (!list || list.length === 0) {\n      return _await('length').keep('length',0);\n    }\n    var keys = list.map(function(prom, idx){\n      return idx;\n    });\n    keys.push('length');\n    return _await.apply(this, keys).run(function(allProm){\n      allProm.keep('length', list.length);\n      list.forEach(function(prom, idx){\n        prom.onfail(allProm.failer());\n        prom.onkeep(function(got){\n          allProm.keep(idx, got);\n        });\n      });\n    });\n  };\n\n  // ------------------------------------------------------------------------\n  // INSTANCEOF SUPPORT\n\n  // so that \"foo instanceof await\" works\n  _await.prototype = Promise.prototype;\n\n  // ------------------------------------------------------------------------\n  // EXPORT\n\n  if (module && module.exports){\n\n    // for common js\n    module.exports = _await;\n    // back compat, for people calling this lib\n    // like var await = require('await').await\n    module.exports['await'] = _await;\n  } else {\n\n    // for browsers\n    if (typeof define === 'function' && define.amd) {\n      define('await', [], function(){ return _await; });\n    } else {\n      window['await'] = _await;\n    }\n  }\n})();\n"}